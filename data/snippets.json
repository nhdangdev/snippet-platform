[
  {
    "id": "1",
    "title": "Binary Search Implementation",
    "description": "Classic binary search algorithm in JavaScript",
    "code": "function binarySearch(arr, target) {\n  let left = 0;\n  let right = arr.length - 1;\n  \n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    \n    if (arr[mid] === target) {\n      return mid;\n    }\n    \n    if (arr[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  \n  return -1;\n}",
    "language": "javascript",
    "topics": [
      "algorithm",
      "search"
    ],
    "complexity": "O(log n)",
    "authorId": "1",
    "isPublic": true,
    "views": 42,
    "createdAt": "2024-01-10T00:00:00.000Z",
    "updatedAt": "2024-01-10T00:00:00.000Z"
  },
  {
    "id": "2",
    "title": "Fibonacci Sequence",
    "description": "Generate Fibonacci sequence using dynamic programming",
    "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    \n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i-1] + fib[i-2])\n    \n    return fib[n]\n\n# Example usage\nprint(fibonacci(10))  # Output: 55",
    "language": "python",
    "topics": [
      "algorithm",
      "dynamic-programming"
    ],
    "complexity": "O(n)",
    "authorId": "2",
    "isPublic": true,
    "views": 156,
    "createdAt": "2024-01-11T00:00:00.000Z",
    "updatedAt": "2024-01-11T00:00:00.000Z"
  },
  {
    "id": "3",
    "title": "Quick Sort Algorithm",
    "description": "Efficient sorting algorithm using divide and conquer",
    "code": "function quickSort(arr) {\n  if (arr.length <= 1) return arr;\n  \n  const pivot = arr[Math.floor(arr.length / 2)];\n  const left = arr.filter(x => x < pivot);\n  const middle = arr.filter(x => x === pivot);\n  const right = arr.filter(x => x > pivot);\n  \n  return [...quickSort(left), ...middle, ...quickSort(right)];\n}\n\n// Example\nconsole.log(quickSort([3, 6, 8, 10, 1, 2, 1]));",
    "language": "javascript",
    "topics": [
      "algorithm",
      "sorting"
    ],
    "complexity": "O(n log n)",
    "authorId": "1",
    "isPublic": true,
    "views": 90,
    "createdAt": "2024-01-12T00:00:00.000Z",
    "updatedAt": "2024-01-12T00:00:00.000Z"
  },
  {
    "id": "4",
    "title": "React Custom Hook - useLocalStorage",
    "description": "Custom hook for persisting state in localStorage",
    "code": "import { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n\nexport default useLocalStorage;",
    "language": "javascript",
    "topics": [
      "react",
      "hooks",
      "web-dev"
    ],
    "complexity": "O(1)",
    "authorId": "2",
    "isPublic": true,
    "views": 236,
    "createdAt": "2024-01-13T00:00:00.000Z",
    "updatedAt": "2024-01-13T00:00:00.000Z"
  },
  {
    "id": "5",
    "title": "Merge Two Sorted Arrayss",
    "description": "Merge two sorted arrays efficiently",
    "code": "public static int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n    int[] result = new int[arr1.length + arr2.length];\n    int i = 0, j = 0, k = 0;\n    \n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result[k++] = arr1[i++];\n        } else {\n            result[k++] = arr2[j++];\n        }\n    }\n    \n    while (i < arr1.length) result[k++] = arr1[i++];\n    while (j < arr2.length) result[k++] = arr2[j++];\n    \n    return result;\n}",
    "language": "java",
    "topics": [
      "algorithm",
      "array"
    ],
    "complexity": "",
    "authorId": "1",
    "isPublic": true,
    "views": 95,
    "createdAt": "2024-01-14T00:00:00.000Z",
    "updatedAt": "2025-10-07T00:21:32.247Z"
  }
]